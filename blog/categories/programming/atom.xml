<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Tiny struggles]]></title>
  <link href="http://atteroTheGreatest.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://atteroTheGreatest.github.com/"/>
  <updated>2013-11-11T15:00:18+01:00</updated>
  <id>http://atteroTheGreatest.github.com/</id>
  <author>
    <name><![CDATA[Justyna Ilczuk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ipython - now your tools]]></title>
    <link href="http://atteroTheGreatest.github.com/blog/2013/11/10/ipython-now-your-tools/"/>
    <updated>2013-11-10T12:58:00+01:00</updated>
    <id>http://atteroTheGreatest.github.com/blog/2013/11/10/ipython-now-your-tools</id>
    <content type="html"><![CDATA[<p>Recently I made a talk about IPython. During preparation I came across a lot of really good materials.</p>

<p>And I know much more, than before.</p>

<h3 id="ipython-whats-that">IPython? What’s that?</h3>
<p><img src="http://ipython.org/ipython-doc/dev/_static/logo.png" alt="IPython logo" /></p>

<p>IPython provides a <strong>rich architecture</strong> for interactive computing with:</p>

<ul>
  <li>Powerful interactive shells (terminal and Qt-based).</li>
  <li>A browser-based notebook with support for code, text, mathematical expressions, inline plots and other rich media.</li>
  <li>Support for interactive data visualization </li>
  <li>Flexible, embeddable interpreters to load into your own projects.</li>
  <li>Easy to use, high performance tools for parallel computing.</li>
</ul>

<p>Let’s grab some screenshots, not to just talk about imaginative things:</p>

<h5 id="terminal-client">Terminal client</h5>

<p><img src="http://i.imgur.com/dbkddMN.png" alt="terminal" /></p>

<h5 id="browser-client-called-notebook">Browser client (called notebook)</h5>

<p><img src="http://nbviewer.ipython.org/urls/raw.github.com/ellisonbg/talk-strata2013/master/files/figures/ipython-notebook-specgram-2.png" alt="notebook" /></p>

<h3 id="why-should-you-use-ipython-5-reasons">Why should you use IPython? 5 reasons</h3>

<h4 id="if-you-are-a-programmer">If you are a programmer:</h4>

<ol>
  <li>Better python shell - terminal ipython client</li>
  <li>Amazing platform for experimenting and learning new things and interactive work, which can be easily transform to ‘normal’ production code</li>
  <li>Programming notebook:
    <ul>
      <li>documenting your code as you write it</li>
      <li>inline execution</li>
      <li>easy sharing - nbviewer</li>
    </ul>
  </li>
  <li>Parallel execution and easy clustering, elaborate tutorial <a href="http://minrk.github.io/scipy-tutorial-2011/">here</a></li>
  <li>Easy way to change your code to different formats, amazing for showing your work using <a href="http://ipython.org/ipython-doc/rel-1.0.0/interactive/nbconvert.html">convert</a>:
    <ul>
      <li>html</li>
      <li>reveal slides</li>
      <li>pdf and more</li>
    </ul>
  </li>
</ol>

<p>It a well designed and actively developed tool with amazing community.</p>

<h4 id="if-you-are-a-researcher">If you are a researcher:</h4>

<ol>
  <li>in one tool you can do:
    <ul>
      <li>data analysis</li>
      <li>computation</li>
      <li>visualisation</li>
      <li>write publication</li>
    </ul>
  </li>
  <li>amazing support for scientific libraries</li>
  <li>easy clustering - number crunching in star cluster</li>
  <li>recomputable science</li>
  <li>scientific notebook
    <ul>
      <li>sharing of your experimental method</li>
      <li>version control</li>
      <li>easy colaboration</li>
    </ul>
  </li>
</ol>

<p>Look at those <a href="https://github.com/ipython/ipython/wiki/A-gallery-of-interesting-IPython-Notebooks">notebooks</a>.</p>

<p>All of this is pretty amazing, not just amount of features, but also how it is implemented and great community surrounding IPython. It’s really easy to grab some tutorials and learn about new functionality, because of lots of great docs, tutorials and example.</p>

<h3 id="how-do-i-start-using-ipython-effectively">How do I start using IPython effectively?</h3>

<p>Your use cases may be different. I would start from installing IPython and reading the introductory docs.</p>

<p>If you have it installed, spend some time playing around. Lot’s of features seems to be pretty intuitive, but it’s easy to get stuck, knowing a very thin subset of ipython’s functionality.</p>

<p>I highly recommend watching <a href="http://www.youtube.com/watch?v=k9BzHApo994">“Ipython In Depth”</a> and cloning it’s <a href="https://github.com/ipython/ipython-in-depth">repo</a>, full of amazing notebooks.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Canvas with javascript and coffee]]></title>
    <link href="http://atteroTheGreatest.github.com/blog/2013/06/30/canvas-coffee-java/"/>
    <updated>2013-06-30T16:21:00+02:00</updated>
    <id>http://atteroTheGreatest.github.com/blog/2013/06/30/canvas-coffee-java</id>
    <content type="html"><![CDATA[<p>Javascript is a bit awkward. The language itself is pretty powerful, but it has an obscure syntax. This week I decided to learn some coffee script which is a cure for javascript ugliness.</p>

<h1 id="resources">Resources</h1>
<p>Coffee has good learning resources, try:</p>

<p><a href="http://coffeescript.org/">official site</a></p>

<p><a href="http://autotelicum.github.io/Smooth-CoffeeScript/">interactive ebook</a></p>

<p>and plenty of websites such as:
<a href="http://www.ibm.com/developerworks/library/wa-coffeescriptcanvas/">this one</a> where you are creating game of life on canvas.</p>

<h1 id="beauty">Beauty</h1>
<p>Coffee is really pretty. Syntax is pretty simple and has lots of sugar. It uses whitespace semantically, similar to python. It make it more elegant and readable, however it can’t be compressed easily. By compression I mean cluttered source code which is often used in web-development production code.</p>

<p>List comprehensions and classes syntax is also very nice. It speeds up development and makes code more readable. </p>

<h1 id="availability">Availability</h1>
<p>It can be embedded in browser directly or first compiled to js and then embedded as a regular js file.</p>

<p>Installing coffee is easy. You only need nodejs and npm.</p>

<p>For complete beginners <a href="http://blog.teamtreehouse.com/the-absolute-beginners-guide-to-coffeescript">this</a> can be a nice starting point.</p>

<h1 id="canvas">Canvas</h1>
<p>Canvas makes js and coffee real fun.</p>

<p>For the beginning I recommend this <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Canvas_tutorial"> tutorial </a></p>

<p>My goal was to build a tetris on a canvas with coffescript. I made some progress and actually built a simplified version - which was at least resembling real tetris ;), but it needs polishing and second thought. </p>

<p>I learned that using classes in coffee script isn’t usually the best idea. It can be tricky if you are used to classical concept of classes such as in C++ and python. Coffee is more functional oriented and it should be our approach.</p>

<h1 id="alternatives">Alternatives</h1>
<p>You should be aware that there are also different <a href="http://jster.net/blog/js-alternatives-coffeescript-dart-typescript#.UdnEHJB8SZo">choices</a>, which one is the best? It’s hard to guess and even harder to try them all.</p>

<p>For example I recently stumbled upon <a href="http://ckknight.github.io/gorillascript/">gorilla-script</a>.</p>

<p>It’s easy to get overwhelmed by all these possibilities, but actually this abundance can help us to find a language which really suits us the best.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GUI development in scalafx ]]></title>
    <link href="http://atteroTheGreatest.github.com/blog/2013/05/06/scalafx-gui-development/"/>
    <updated>2013-05-06T18:05:00+02:00</updated>
    <id>http://atteroTheGreatest.github.com/blog/2013/05/06/scalafx-gui-development</id>
    <content type="html"><![CDATA[<h3 id="installation">Installation</h3>
<p>There is a scalafx <a href="https://code.google.com/p/scalafx/">webpage</a> and it has detailed tutorial how to <a href="https://code.google.com/p/scalafx/wiki/GettingStarted">install scalafx and get started</a>. However it is actually even simples as described there. When you have working scala environment (eclipse with scala IDE for example) make sure that you use jdk from oracle (includes javafx by default and you need javafx to use scalafx) and just download scalafx jars and include them in your project.</p>

<h3 id="available-learning-resources">Available learning resources</h3>
<p>Creating gui with scalafx isn’t hard when you know how to use it. </p>

<p>If you know javafx you’ve probably seen ProJavaFX book. Good news! There’s a <a href="https://github.com/jsacha/ProScalaFX/">scalafx equivalent in source code</a></p>

<p>A better scalafx API overview is <a href="https://github.com/jugchennai/scalafx-ensemble">ensemble project</a>.</p>

<h3 id="when-help-from-available-examples-is-not-enough">When help from available examples is not enough</h3>
<p>Asking google doesn’t provide many helpful examples. I tried to resolve some of my problems, but I couldn’t find right answer usually. Which is different from for example problems with java, because there are usually lots of questions with answers. </p>

<p>But… it’s not so bad. Scalafx source code is available and well written and you can just skim it and get your answers or translate your problem to javafx problem and then look for answer in java community.</p>

<h3 id="mixing-scalafx-with-javafx">Mixing scalafx with javafx</h3>
<p>I didn’t all issues in my code(I have some problems with responsivness with observable buffers) but I can already tell that scalafx works well with javafx.</p>

<p>I wanted to add some warning dialogs into my scalafx application, but scalafx or javafx don’t support it by default. I found dialogs library for javafx and tried to use it to show dialog in my scalafx app. Guess what? It worked and doing it was really simple.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>splitContentToSentences - MainApp.scala </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">javafx.scene.control.Dialogs</span>
</span><span class='line'><span class="o">(</span><span class="err">…</span><span class="o">)</span>
</span><span class='line'><span class="k">new</span> <span class="nc">Button</span><span class="o">(</span><span class="err">“</span><span class="nc">Submit</span><span class="err">”</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>	<span class="n">onAction</span> <span class="k">=</span> <span class="o">{</span><span class="n">e</span><span class="k">:</span> <span class="kt">ActionEvent</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>		<span class="k">val</span> <span class="n">emptyFields</span> <span class="k">=</span> <span class="n">getEmptyFields</span><span class="o">()</span>
</span><span class='line'>		<span class="k">if</span><span class="o">(!</span><span class="n">emptyFields</span><span class="o">.</span><span class="n">isEmpty</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>			<span class="nc">Dialogs</span><span class="o">.</span><span class="n">showWarningDialog</span><span class="o">(</span><span class="n">stage</span><span class="o">,</span>
</span><span class='line'>			 	<span class="n">emptyFields</span><span class="o">.</span><span class="n">mkString</span><span class="o">(</span><span class="err">“</span><span class="o">,</span> <span class="err">“</span><span class="o">)</span> <span class="o">+</span> <span class="err">“</span> <span class="n">cannot</span> <span class="n">be</span> <span class="n">empty</span><span class="o">.</span><span class="err">”</span><span class="o">,</span>
</span><span class='line'>			 	<span class="err">“</span><span class="nc">Book</span> <span class="n">couldn</span><span class="err">’</span><span class="n">t</span> <span class="n">be</span> <span class="n">added</span><span class="o">.</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="nc">Adding</span> <span class="n">failure</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>			<span class="o">}</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'><span class="o">(</span><span class="err">…</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here’s the library: <a href="https://github.com/marcojakob/javafx-ui-sandbox/tree/master/javafx-dialogs">javafx-dialogs</a></p>

<p>and descriptive <a href="http://edu.makery.ch/blog/2012/10/30/javafx-2-dialogs/">blog post</a> about how to use it.</p>

<p>And I forgot to add - scalafx looks quite well (like javafx) opposed to scala swing which looks just horrible. Scala swing sounds nice, it’s simple, is available by default, has scaladoc… but don’t get deceived. Scala swing looks old, api makes strange suprises, and its development is a lie. Just use something else instead, for example scalafx.</p>
]]></content>
  </entry>
  
</feed>
