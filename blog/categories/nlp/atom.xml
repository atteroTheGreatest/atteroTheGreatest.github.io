<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nlp | Tiny struggles of a growing hackaphysicist]]></title>
  <link href="http://atteroTheGreatest.github.com/blog/categories/nlp/atom.xml" rel="self"/>
  <link href="http://atteroTheGreatest.github.com/"/>
  <updated>2013-07-08T12:22:51+02:00</updated>
  <id>http://atteroTheGreatest.github.com/</id>
  <author>
    <name><![CDATA[Justyna Ilczuk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fitting text into categories]]></title>
    <link href="http://atteroTheGreatest.github.com/blog/2013/05/19/categories/"/>
    <updated>2013-05-19T20:05:00+02:00</updated>
    <id>http://atteroTheGreatest.github.com/blog/2013/05/19/categories</id>
    <content type="html"><![CDATA[<h3 id="how-to-classify">How to classify?</h3>
<p>You can use various methods to classify objects. There are many tools in machine learning and natural language processing packages. But sometimes it’s hard to find one, which suits your problem well. I wanted to write category classifier in scala, making it as simple as possible. I could use <a href="http://www.scalanlp.org/">breeze</a>, but at first glance it’s quite overwhelming and documentation isn’t really user friendly. (I love python <a href="http://scikit-learn.org/stable/">scikit-learn</a>, which is in my opinion the best machine learning library in the world)</p>

<p>I decided to implement it all by myself using only basic SDK of scala. </p>

<h3 id="main-idea-behind-my-script">Main idea behind my script</h3>
<p>In written language exist lots of common words such as: “the”, “and”, “this”, etc. Specialised article or book contains lots of vocabulary connected to the field.</p>

<p>I did some web crawling to collect some articles with typical vocabulary for three basic fields: physics, electronics and mathematics. As a sample of normaly used vocabulary (not conected with any specialised field) I used some random articles from Guardian. </p>

<p>After collecting articles I could compute the most common worlds for each category. My classifying algorithm basically chooses a category, which vocabulary has the biggest intersection with given text, if intersection is very small it returns category “boring”.</p>

<h3 id="implementation">Implementation</h3>
<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>splitContentToSentences - commonVocabulary.scala </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">java.io.RandomAccessFile</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.collection.mutable.HashMap</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">removePunctuation</span><span class="o">(</span><span class="n">text</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>	<span class="k">val</span> <span class="n">punct</span> <span class="k">=</span> <span class="err">“</span><span class="o">,.?;:!</span><span class="s">&quot;”</span>
</span><span class='line'><span class="s">	text.toList.filterNot(char =&amp;gt; punct contains char).mkString(“”)</span>
</span><span class='line'><span class="s">}&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;def getWordsFromRawText(text: String) = {</span>
</span><span class='line'><span class="s">	removePunctuation(text).toLowerCase.split(“\s+”).toList</span>
</span><span class='line'><span class="s">}&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;def getAllWords(basePath: String) = {</span>
</span><span class='line'><span class="s">	import java.io.File</span>
</span><span class='line'><span class="s">	val baseDir = new File(basePath)</span>
</span><span class='line'><span class="s">	val paths = baseDir.listFiles.toList.sorted</span>
</span><span class='line'><span class="s">	var words = List&lt;a href=&quot;&quot;&gt;String&lt;/a&gt;</span>
</span><span class='line'><span class="s">	for( path &amp;lt;- paths) {</span>
</span><span class='line'><span class="s">		val raf = new RandomAccessFile(path, “r”)</span>
</span><span class='line'><span class="s">		val buff = new Array&lt;a href=&quot;</span><span class="n">raf</span><span class="o">.</span><span class="n">length</span><span class="o">.</span><span class="n">toInt</span><span class="s">&quot;&gt;Byte&lt;/a&gt;</span>
</span><span class='line'><span class="s">		raf.readFully(buff)</span>
</span><span class='line'><span class="s">		words = words ++: getWordsFromRawText(new String(buff))</span>
</span><span class='line'><span class="s">	}</span>
</span><span class='line'><span class="s">	words</span>
</span><span class='line'><span class="s">}&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;def rankWords(words: List[String], normalVocabulary: Set[String]) = {</span>
</span><span class='line'><span class="s">	var wordOccurences = new HashMap&lt;a href=&quot;&quot;&gt;String, Int&lt;/a&gt;</span>
</span><span class='line'><span class="s">	for(word &amp;lt;- words if !( normalVocabulary contains word) ){</span>
</span><span class='line'><span class="s">		if (wordOccurences contains word) {</span>
</span><span class='line'><span class="s">			wordOccurences(word) += 1</span>
</span><span class='line'><span class="s">		}</span>
</span><span class='line'><span class="s">		else</span>
</span><span class='line'><span class="s">			wordOccurences(word) = 1</span>
</span><span class='line'><span class="s">	}</span>
</span><span class='line'><span class="s">	wordOccurences.toList.sortBy(&lt;em&gt;.&lt;/em&gt;2).reverse</span>
</span><span class='line'><span class="s">}&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;val basePath = “articles/physics/”</span>
</span><span class='line'><span class="s">val normalVocabulary = getAllWords(“articles/random/”)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;val commonNormalVoc = (for {word &amp;lt;- </span>
</span><span class='line'><span class="s">	rankWords(normalVocabulary, Set(“”)).slice(0, 400)}</span>
</span><span class='line'><span class="s">	 yield word._1).toSet&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;val physicsVocabulary = getAllWords(“articles/physics/”)</span>
</span><span class='line'><span class="s">val commonPhysicsVoc = (for {word &amp;lt;- rankWords(physicsVocabulary, </span>
</span><span class='line'><span class="s">	commonNormalVoc).slice(0, 400)} yield word._1).toSet&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;val electronicsVocabulary = getAllWords(“articles/electronics/”)</span>
</span><span class='line'><span class="s">val commonElectronicsVoc = (for {word &amp;lt;- </span>
</span><span class='line'><span class="s">	rankWords(electronicsVocabulary, </span>
</span><span class='line'><span class="s">	commonNormalVoc).slice(0, 400)} yield word._1).toSet&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;val mathVocabulary = getAllWords(“articles/math/”)</span>
</span><span class='line'><span class="s">val commonMathVoc = (for {word &amp;lt;- rankWords(mathVocabulary,</span>
</span><span class='line'><span class="s"> commonNormalVoc).slice(0, 400)} yield word._1).toSet&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;val testArticleAboutPhysics = “””</span>
</span><span class='line'><span class="s">Thermodynamics is a branch of natural science </span>
</span><span class='line'><span class="s">concerned (…) or statistical mechanics, gave</span>
</span><span class='line'><span class="s"> explanations of macroscopic thermodynamics by </span>
</span><span class='line'><span class="s"> statistical predictions of the collective motion </span>
</span><span class='line'><span class="s"> of particles based on the mechanics of their </span>
</span><span class='line'><span class="s"> microscopic behavior.</span>
</span><span class='line'><span class="s">“””&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;val testArticleAboutMath = “””</span>
</span><span class='line'><span class="s">Algebra can essentially be considered </span>
</span><span class='line'><span class="s">as doing computations (…) a polynomial </span>
</span><span class='line'><span class="s">in a single variable.</span>
</span><span class='line'><span class="s">“””&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;val testArticleAboutElectronics = “””</span>
</span><span class='line'><span class="s">Wheatstone bridge</span>
</span><span class='line'><span class="s">(…) zero the voltage.</span>
</span><span class='line'><span class="s">“””&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;val typicalGuardianArticle = “””</span>
</span><span class='line'><span class="s">The French president, (…) have legalised same-sex marriage.</span>
</span><span class='line'><span class="s">“””&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;def matchCategory(text: String) = {</span>
</span><span class='line'><span class="s">	val words = getWordsFromRawText(text).toSet</span>
</span><span class='line'><span class="s">	val wordsCount = words.size</span>
</span><span class='line'><span class="s">	val categories =  HashMap(“physics” -&amp;gt;</span>
</span><span class='line'><span class="s">	 (words intersect commonPhysicsVoc).size.toDouble / </span>
</span><span class='line'><span class="s">	 wordsCount * 100,</span>
</span><span class='line'><span class="s">	“electronics” -&amp;gt; (words intersect commonElectronicsVoc).size.toDouble </span>
</span><span class='line'><span class="s">	/ wordsCount * 100,</span>
</span><span class='line'><span class="s">	“math” -&amp;gt; (words intersect commonMathVoc).size.toDouble /</span>
</span><span class='line'><span class="s">	 wordsCount * 100).toList.sortBy(&lt;em&gt;.&lt;/em&gt;2).reverse&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;val winningCategory = if (categories(0)._2 &amp;gt; 10)</span>
</span><span class='line'><span class="s"> categories(0) </span>
</span><span class='line'><span class="s">else </span>
</span><span class='line'><span class="s">	(&quot;</span><span class="n">boring</span><span class="s">&quot;, (words intersect commonNormalVoc).size.toDouble</span>
</span><span class='line'><span class="s">	 / wordsCount * 100)</span>
</span><span class='line'><span class="s">println(&quot;</span><span class="nc">Article</span> <span class="n">matches</span> <span class="n">category</span><span class="k">:</span> <span class="err">&quot;</span> <span class="kt">+</span> <span class="kt">winningCategory</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">categories</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="s">&quot;Similarity to normal vocabulary: &quot;</span> <span class="o">+</span>
</span><span class='line'> <span class="o">(</span><span class="n">words</span> <span class="n">intersect</span> <span class="n">commonNormalVoc</span><span class="o">).</span><span class="n">size</span><span class="o">.</span><span class="n">toDouble</span>
</span><span class='line'> <span class="o">/</span> <span class="n">wordsCount</span> <span class="o">*</span> <span class="mi">100</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">println</span><span class="o">(</span><span class="err">“</span><span class="nc">Testing</span> <span class="n">article</span> <span class="n">about</span> <span class="n">physics</span><span class="k">:</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'><span class="n">matchCategory</span><span class="o">(</span><span class="n">testArticleAboutPhysics</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="err">“</span><span class="o">\</span><span class="n">nTesting</span> <span class="n">article</span> <span class="n">about</span> <span class="n">math</span><span class="k">:</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'><span class="n">matchCategory</span><span class="o">(</span><span class="n">testArticleAboutMath</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="err">“</span><span class="o">\</span><span class="n">nTesting</span> <span class="n">article</span> <span class="n">about</span> <span class="n">electronics</span><span class="k">:</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'><span class="n">matchCategory</span><span class="o">(</span><span class="n">testArticleAboutElectronics</span><span class="o">)</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="err">“</span><span class="o">\</span><span class="n">nTesting</span> <span class="n">typical</span> <span class="n">guardian</span> <span class="n">article</span><span class="k">:</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'><span class="n">matchCategory</span><span class="o">(</span><span class="n">typicalGuardianArticle</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I stored collected articles in directory “articles/{category}” and used them to generate vocabulary sets.</p>

<p>There are two important functions in this code: “rankWords” and “match category”. Ranking is based of how many times given word occurs in the text. Matching categories using set intersections to estimate which category suits the best.</p>

<p>Here is the output of this script (test files were much longer):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>commonVocabulary.scala output</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Testing</span> <span class="n">article</span> <span class="n">about</span> <span class="n">physics</span><span class="k">:</span>
</span><span class='line'><span class="kt">Article</span> <span class="kt">matches</span> <span class="kt">category:</span> <span class="o">(</span><span class="kt">physics</span><span class="o">,</span><span class="err">34</span><span class="kt">.</span><span class="err">66666666666667</span><span class="o">)</span>
</span><span class='line'><span class="nc">List</span><span class="o">((</span><span class="n">physics</span><span class="o">,</span><span class="mf">34.66666666666667</span><span class="o">),</span> <span class="o">(</span><span class="n">electronics</span><span class="o">,</span><span class="mf">10.222222222222223</span><span class="o">),</span> <span class="o">(</span><span class="n">math</span><span class="o">,</span><span class="mf">8.0</span><span class="o">))</span>
</span><span class='line'><span class="nc">Similarity</span> <span class="n">to</span> <span class="n">normal</span> <span class="n">vocabulary</span><span class="k">:</span> <span class="err">23</span><span class="kt">.</span><span class="err">11111111111111</span><span class="kt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nc">Testing</span> <span class="n">article</span> <span class="n">about</span> <span class="n">math</span><span class="k">:</span>
</span><span class='line'><span class="kt">Article</span> <span class="kt">matches</span> <span class="kt">category:</span> <span class="o">(</span><span class="kt">math</span><span class="o">,</span><span class="err">26</span><span class="kt">.</span><span class="err">01880877742947</span><span class="o">)</span>
</span><span class='line'><span class="nc">List</span><span class="o">((</span><span class="n">math</span><span class="o">,</span><span class="mf">26.01880877742947</span><span class="o">),</span> <span class="o">(</span><span class="n">physics</span><span class="o">,</span><span class="mf">21.003134796238246</span><span class="o">),</span> <span class="o">(</span><span class="n">electronics</span><span class="o">,</span><span class="mf">13.793103448275861</span><span class="o">))</span>
</span><span class='line'><span class="nc">Similarity</span> <span class="n">to</span> <span class="n">normal</span> <span class="n">vocabulary</span><span class="k">:</span> <span class="err">23</span><span class="kt">.</span><span class="err">824451410658305</span><span class="kt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nc">Testing</span> <span class="n">article</span> <span class="n">about</span> <span class="n">electronics</span><span class="k">:</span>
</span><span class='line'><span class="kt">Article</span> <span class="kt">matches</span> <span class="kt">category:</span> <span class="o">(</span><span class="kt">electronics</span><span class="o">,</span><span class="err">23</span><span class="kt">.</span><span class="err">717948717948715</span><span class="o">)</span>
</span><span class='line'><span class="nc">List</span><span class="o">((</span><span class="n">electronics</span><span class="o">,</span><span class="mf">23.717948717948715</span><span class="o">),</span> <span class="o">(</span><span class="n">physics</span><span class="o">,</span><span class="mf">16.666666666666664</span><span class="o">),</span> <span class="o">(</span><span class="n">math</span><span class="o">,</span><span class="mf">14.102564102564102</span><span class="o">))</span>
</span><span class='line'><span class="nc">Similarity</span> <span class="n">to</span> <span class="n">normal</span> <span class="n">vocabulary</span><span class="k">:</span> <span class="err">27</span><span class="kt">.</span><span class="err">564102564102566</span><span class="kt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nc">Testing</span> <span class="n">typical</span> <span class="n">guardian</span> <span class="n">article</span><span class="k">:</span>
</span><span class='line'><span class="kt">Article</span> <span class="kt">matches</span> <span class="kt">category:</span> <span class="o">(</span><span class="kt">boring</span><span class="o">,</span><span class="err">30</span><span class="kt">.</span><span class="err">45977011494253</span><span class="o">)</span>
</span><span class='line'><span class="nc">List</span><span class="o">((</span><span class="n">electronics</span><span class="o">,</span><span class="mf">2.8735632183908044</span><span class="o">),</span> <span class="o">(</span><span class="n">math</span><span class="o">,</span><span class="mf">2.2988505747126435</span><span class="o">),</span> <span class="o">(</span><span class="n">physics</span><span class="o">,</span><span class="mf">2.2988505747126435</span><span class="o">))</span>
</span><span class='line'><span class="nc">Similarity</span> <span class="n">to</span> <span class="n">normal</span> <span class="n">vocabulary</span><span class="k">:</span> <span class="err">30</span><span class="kt">.</span><span class="err">45977011494253</span><span class="kt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It took some code, but it’s actually pretty simple and works well. Scala offers really nice api to work with this kind of problems.</p>
]]></content>
  </entry>
  
</feed>
